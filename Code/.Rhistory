library(lixoftConnectors)
library(mvtnorm)
library(nlme)
library(saemix)
library(tidyverse)
library(lme4)
library(MASS)
library(xtable)
library(berryFunctions)
library(kableExtra)
initializeLixoftConnectors(software="monolix")
##=====================Setting======================
num_sim <- 100  #number of simulation
num_patient <- 50  #number of patients
# censor_value <- log10(40)  #censor value
#Set true values for p1, b1, p2, sigma1, and covariance matrix D for viral loads before ART interruption
#Follow model 1: y_ij=log10(p_1i+p_2i*exp(-lambda_1i*t_ij))+e_ij
#Random effects: p_1i=p1+b_1i,p_2i=p1+b_2i,lambda_1i=lambda1+b_3i,
#where e_ij~N(0,sigma1^2) and b_i~N(0,D)
sigma <- 0.1
p1 <- 17
lambda1 <- 4
p2 <- 3
D <- diag(c(2, 0.1, 0.1))
#Choose time from true_value dataset.
time <- c(0.5,1.67,2.3, 3.5, 5) #PATIENT #1
#Create a data frame for simulation estimates.
estimates_SAEM <- estimates_NLME <- estimates_LME4 <- data.frame(matrix(nrow=num_sim,ncol = 3))
colnames(estimates_SAEM) <- colnames(estimates_NLME) <- colnames(estimates_LME4) <- c("p1","lambda1","p2")
SE_SAEM <- SE_NLME <- SE_LME4 <- data.frame(matrix(nrow=num_sim,ncol = 3))
colnames(SE_SAEM) <- colnames(SE_NLME) <- colnames(SE_LME4) <- c("p1","lambda1","p2")
CI_SAEM <- CI_NLME <- CI_LME4 <- data.frame(matrix(nrow=num_sim,ncol = 3))
colnames(CI_SAEM) <- colnames(CI_NLME) <- colnames(CI_LME4) <- c("p1","lambda1","p2")
time_SAEM <- time_NLME <- time_LME4 <- c(rep(NA, num_sim))
Model <- function(p1 ,b1 ,p2, t) {
log10 ( exp(p1-b1*t)+ exp (p2))
}
ModelGradient <- deriv(
body(Model)[[2]],
namevec = c("p1", "b1", "p2"),
function.arg = Model
)
i=1
fail = 0
# glue::glue("i=", i)
##==================Viral load before ART interruption======================
#Create dataset for viral load before ART interruption: 1/2*num_patient patients with time1 and 1/2*num_patient patients with time2
PATIENT <- rep(1:num_patient, each = length(time))
day <- rep(time, num_patient)
data <- cbind(PATIENT, day)
#simulate b_i and e_ij
bi_sim <- mvrnorm(num_patient, c(0,0,0), D)
colnames(bi_sim)=c("b1_sim","b2_sim","b3_sim")
bi_sim <- cbind(PATIENT=c(1:num_patient),bi_sim)
data <- merge(data, bi_sim, by="PATIENT")
data <- data %>%
mutate(e = rnorm(nrow(data), 0, sigma))
#simulate viral load and use censor_value to indicate censor. censor=1 if simulated viral load < censor_value.
# data_saem <- data %>%
#   mutate(viral = log10(exp(p1+b1_sim-(lambda1+b3_sim)*day)+exp(p2+b2_sim))+e) %>%
#   mutate(censor = ifelse(viral < censor_value, 1, 0)) %>%
#   mutate(viral = ifelse(viral < censor_value, censor_value, viral)) %>%
#   mutate(limit = 0) %>%
#   dplyr::select(-b1_sim, -b2_sim, -b3_sim, -e)
# summary(data_saem$censor)
data_sim <- data %>%
mutate(viral = log10(exp(p1+b1_sim-(lambda1+b3_sim)*day)+exp(p2+b2_sim))+e)%>%
dplyr::select(-b1_sim, -b2_sim, -b3_sim, -e)
# # impute the censored value by half the detection limit for data_nlme
# data_nlme <- data_saem %>%
#   mutate(viral = ifelse(censor == 1, 0.5*censor_value, viral)) %>%
#   dplyr::select(-censor, -limit)
# ggplot(data_saem[PATIENT%in%c(1:5),], aes(x=day, y=viral)) +
#   geom_point(aes(fill=factor(censor)),size=2, shape=21, stroke=0) +
#   geom_line(aes(group=PATIENT)) +
#   scale_x_continuous("Day") +
#   scale_y_continuous(bquote("Viral load (in" ~ log[10]~"-scale)"))+
#   scale_fill_manual(values=c("black","red"),labels = c("Observed data", "Censored data"))+
#   labs(color = "ART status", fill = "Data type")+
#   # ggtitle("Plot for all observations")+
#   theme_classic()+theme(text=element_text(size=14),panel.grid.major=element_line(colour = "grey90"), panel.grid.minor =element_line(colour = "grey90"))
ggplot(data_sim[PATIENT%in%c(1:5),], aes(x=day, y=viral)) +
geom_point() +
geom_line(aes(group=PATIENT)) +
scale_x_continuous("Day") +
scale_y_continuous(bquote("Viral load (in" ~ log[10]~"-scale)"))+
# ggtitle("Plot for all observations")+
theme_classic()+theme(text=element_text(size=14),panel.grid.major=element_line(colour = "grey90"), panel.grid.minor =element_line(colour = "grey90"))
#   dplyr::select(-censor, -limit)
# ggplot(data_saem[PATIENT%in%c(1:5),], aes(x=day, y=viral)) +
#   geom_point(aes(fill=factor(censor)),size=2, shape=21, stroke=0) +
#   geom_line(aes(group=PATIENT)) +
#   scale_x_continuous("Day") +
#   scale_y_continuous(bquote("Viral load (in" ~ log[10]~"-scale)"))+
#   scale_fill_manual(values=c("black","red"),labels = c("Observed data", "Censored data"))+
#   labs(color = "ART status", fill = "Data type")+
#   # ggtitle("Plot for all observations")+
#   theme_classic()+theme(text=element_text(size=14),panel.grid.major=element_line(colour = "grey90"), panel.grid.minor =element_line(colour = "grey90"))
ggplot(data_sim[PATIENT%in%c(1:5),], aes(x=day, y=viral)) +
geom_point() +
geom_line(aes(group=PATIENT)) +
scale_x_continuous("Time") +
scale_y_continuous(bquote("Viral load (in" ~ log[10]~"-scale)"))+
# ggtitle("Plot for all observations")+
theme_classic()+theme(text=element_text(size=14),panel.grid.major=element_line(colour = "grey90"), panel.grid.minor =element_line(colour = "grey90"))
# save the simulated data locally
write.table(data_sim,"Data/data_DecayI.txt", sep = "," ,quote = FALSE,row.names = FALSE)
library(lixoftConnectors)
library(mvtnorm)
library(nlme)
library(saemix)
library(tidyverse)
library(lme4)
library(MASS)
library(xtable)
library(berryFunctions)
library(kableExtra)
initializeLixoftConnectors(software="monolix")
##=====================Setting======================
num_sim <- 500  #number of simulation
num_patient <- 50  #number of patients
#Choose time from true_value dataset.
time <- c(0.5, 1.67, 3, 4.6, 6) #PATIENT #1
P1 = 17
lambda1 = 4
P2 = 3
sigma = 0.1
#set true values for alpha0, alpha1
alpha0 <- 8
alpha1 <- -2
G <- diag(c(2, 0.5))
#Create a data frame for simulation estimates.
estimates_SAEM <- estimates_LME4 <- data.frame(matrix(nrow=num_sim,ncol = 2))
colnames(estimates_SAEM) <- colnames(estimates_LME4) <- c("alpha0", "alpha1")
SE_SAEM <- SE_LME4 <- data.frame(matrix(nrow=num_sim,ncol = 2))
colnames(SE_SAEM) <- colnames(SE_LME4) <- c("alpha0", "alpha1")
CI_SAEM <- CI_LME4 <- data.frame(matrix(nrow=num_sim,ncol = 2))
colnames(CI_SAEM) <- colnames(CI_LME4) <- c("alpha0", "alpha1")
time_SAEM <- time_LME4 <- c(rep(NA, num_sim))
i=1
fail = 0
print(glue::glue("i=", i))
##==================Viral load before ART interruption======================
#Create dataset for viral load before ART interruption: 1/2*num_patient patients with time1 and 1/2*num_patient patients with time2
PATIENT <- rep(1:num_patient, each = length(time))
day <- rep(time, num_patient)
data <- cbind(PATIENT, day)
# simulate b_i and e_ij
# simulate a_i
ai_sim <- mvrnorm(num_patient, c(0,0), G)
colnames(ai_sim)=c("a1_sim","a2_sim")
ai_sim <- cbind(PATIENT=c(1:num_patient),ai_sim)
data <- merge(data, ai_sim, by="PATIENT")
data_sim <- data %>%
mutate(e = rnorm(nrow(data), 0, sigma)) %>%
mutate(x = log10(exp(P1-(lambda1)*day)+exp(P2))+e) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -xb, -p, -e, -x)
summary(as.factor(data_sim$y))
# save the simulated data locally
write.table(data_sim,"Data/data_GLMMI.txt", sep = "," ,quote = FALSE,row.names = FALSE)
library(lixoftConnectors)
library(mvtnorm)
library(nlme)
library(saemix)
library(tidyverse)
library(lme4)
library(MASS)
library(xtable)
library(berryFunctions)
library(kableExtra)
initializeLixoftConnectors(software="monolix")
num_sim <- 500  #number of simulation
num_patient <- 50  #number of patients
#Choose time from true_value dataset.
time <- c(0.5, 1.67, 3, 4.6, 6) #PATIENT #1
#set true values for alpha0, alpha1
alpha0 <- 8
alpha1 <- -2
alpha2 <- 5
G <- diag(c(2, 0.5, 1))
i=1
print(glue::glue("i=", i))
##==================Viral load before ART interruption======================
#Create dataset for viral load before ART interruption: 1/2*num_patient patients with time1 and 1/2*num_patient patients with time2
PATIENT <- rep(1:num_patient, each = length(time))
day <- rep(time, num_patient)
data <- cbind(PATIENT, day)
# simulate b_i and e_ij
# simulate a_i
ai_sim <- mvrnorm(num_patient, c(0,0,0), G)
colnames(ai_sim)=c("a1_sim","a2_sim","a3_sim")
ai_sim <- cbind(PATIENT=c(1:num_patient),ai_sim)
data <- merge(data, ai_sim, by="PATIENT")
data_sim <- data %>%
mutate(e = rnorm(nrow(data), 0, sigma)) %>%
mutate(x = rnorm(nrow(data), 0, 1)) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day + (alpha2 + a3_sim) * x) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -a3_sim, -xb, -p, -e)
rnorm(nrow(data), 0, sigma))
rnorm(nrow(data), 0, sigma)
PATIENT <- rep(1:num_patient, each = length(time))
day <- rep(time, num_patient)
data <- cbind(PATIENT, day)
# simulate b_i and e_ij
# simulate a_i
ai_sim <- mvrnorm(num_patient, c(0,0,0), G)
colnames(ai_sim)=c("a1_sim","a2_sim","a3_sim")
ai_sim <- cbind(PATIENT=c(1:num_patient),ai_sim)
data <- merge(data, ai_sim, by="PATIENT")
data_sim <- data %>%
mutate(e = rnorm(nrow(data), 0, sigma)) %>%
mutate(x = rnorm(nrow(data), 0, 1)) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day + (alpha2 + a3_sim) * x) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -a3_sim, -xb, -p, -e)
data %>%
mutate(e = rnorm(nrow(data), 0, sigma))
data_sim <- data %>%
mutate(x = rnorm(nrow(data), 0, 1)) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day + (alpha2 + a3_sim) * x) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -a3_sim, -xb, -p, -e)
data_sim <- data %>%
mutate(x = rnorm(nrow(data), 0, 1)) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day + (alpha2 + a3_sim) * x) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -a3_sim, -xb, -p)
View(data_sim)
summary(as.factor(data_sim$y))
140/250
num_sim <- 500  #number of simulation
num_patient <- 50  #number of patients
#Choose time from true_value dataset.
time <- c(0.5, 1.67, 3, 4.6, 6) #PATIENT #1
#set true values for alpha0, alpha1
alpha0 <- 8
alpha1 <- -2
alpha2 <- 2
G <- diag(c(2, 0.5, 1))
#Create a data frame for simulation estimates.
estimates_SAEM <- estimates_LME4 <- data.frame(matrix(nrow=num_sim,ncol = 3))
colnames(estimates_SAEM) <- colnames(estimates_LME4) <- c("alpha0", "alpha1", "alpha2")
SE_SAEM <- SE_LME4 <- data.frame(matrix(nrow=num_sim,ncol = 3))
colnames(SE_SAEM) <- colnames(SE_LME4) <- c("alpha0", "alpha1", "alpha2")
CI_SAEM <- CI_LME4 <- data.frame(matrix(nrow=num_sim,ncol = 3))
colnames(CI_SAEM) <- colnames(CI_LME4) <- c("alpha0", "alpha1", "alpha2")
time_SAEM <- time_LME4 <- c(rep(NA, num_sim))
i=1
print(glue::glue("i=", i))
##==================Viral load before ART interruption======================
#Create dataset for viral load before ART interruption: 1/2*num_patient patients with time1 and 1/2*num_patient patients with time2
PATIENT <- rep(1:num_patient, each = length(time))
day <- rep(time, num_patient)
data <- cbind(PATIENT, day)
# simulate b_i and e_ij
# simulate a_i
ai_sim <- mvrnorm(num_patient, c(0,0,0), G)
colnames(ai_sim)=c("a1_sim","a2_sim","a3_sim")
ai_sim <- cbind(PATIENT=c(1:num_patient),ai_sim)
data <- merge(data, ai_sim, by="PATIENT")
data_sim <- data %>%
mutate(x = rnorm(nrow(data), 0, 1)) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day + (alpha2 + a3_sim) * x) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -a3_sim, -xb, -p)
summary(as.factor(data_sim$y))
#Create dataset for viral load before ART interruption: 1/2*num_patient patients with time1 and 1/2*num_patient patients with time2
PATIENT <- rep(1:num_patient, each = length(time))
day <- rep(time, num_patient)
data <- cbind(PATIENT, day)
# simulate b_i and e_ij
# simulate a_i
ai_sim <- mvrnorm(num_patient, c(0,0,0), G)
colnames(ai_sim)=c("a1_sim","a2_sim","a3_sim")
ai_sim <- cbind(PATIENT=c(1:num_patient),ai_sim)
data <- merge(data, ai_sim, by="PATIENT")
data_sim <- data %>%
mutate(x = rnorm(nrow(data), 0, 1)) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day + (alpha2 + a3_sim) * x) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -a3_sim, -xb, -p)
summary(as.factor(data_sim$y))
#Create dataset for viral load before ART interruption: 1/2*num_patient patients with time1 and 1/2*num_patient patients with time2
PATIENT <- rep(1:num_patient, each = length(time))
day <- rep(time, num_patient)
data <- cbind(PATIENT, day)
# simulate b_i and e_ij
# simulate a_i
ai_sim <- mvrnorm(num_patient, c(0,0,0), G)
colnames(ai_sim)=c("a1_sim","a2_sim","a3_sim")
ai_sim <- cbind(PATIENT=c(1:num_patient),ai_sim)
data <- merge(data, ai_sim, by="PATIENT")
data_sim <- data %>%
mutate(x = rnorm(nrow(data), 0, 1)) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day + (alpha2 + a3_sim) * x) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -a3_sim, -xb, -p)
summary(as.factor(data_sim$y))
#Create dataset for viral load before ART interruption: 1/2*num_patient patients with time1 and 1/2*num_patient patients with time2
PATIENT <- rep(1:num_patient, each = length(time))
day <- rep(time, num_patient)
data <- cbind(PATIENT, day)
# simulate b_i and e_ij
# simulate a_i
ai_sim <- mvrnorm(num_patient, c(0,0,0), G)
colnames(ai_sim)=c("a1_sim","a2_sim","a3_sim")
ai_sim <- cbind(PATIENT=c(1:num_patient),ai_sim)
data <- merge(data, ai_sim, by="PATIENT")
data_sim <- data %>%
mutate(x = rnorm(nrow(data), 0, 1)) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day + (alpha2 + a3_sim) * x) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -a3_sim, -xb, -p)
summary(as.factor(data_sim$y))
#Create dataset for viral load before ART interruption: 1/2*num_patient patients with time1 and 1/2*num_patient patients with time2
PATIENT <- rep(1:num_patient, each = length(time))
day <- rep(time, num_patient)
data <- cbind(PATIENT, day)
# simulate b_i and e_ij
# simulate a_i
ai_sim <- mvrnorm(num_patient, c(0,0,0), G)
colnames(ai_sim)=c("a1_sim","a2_sim","a3_sim")
ai_sim <- cbind(PATIENT=c(1:num_patient),ai_sim)
data <- merge(data, ai_sim, by="PATIENT")
data_sim <- data %>%
mutate(x = rnorm(nrow(data), 0, 1)) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day + (alpha2 + a3_sim) * x) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -a3_sim, -xb, -p)
summary(as.factor(data_sim$y))
#Create dataset for viral load before ART interruption: 1/2*num_patient patients with time1 and 1/2*num_patient patients with time2
PATIENT <- rep(1:num_patient, each = length(time))
day <- rep(time, num_patient)
data <- cbind(PATIENT, day)
# simulate b_i and e_ij
# simulate a_i
ai_sim <- mvrnorm(num_patient, c(0,0,0), G)
colnames(ai_sim)=c("a1_sim","a2_sim","a3_sim")
ai_sim <- cbind(PATIENT=c(1:num_patient),ai_sim)
data <- merge(data, ai_sim, by="PATIENT")
data_sim <- data %>%
mutate(x = rnorm(nrow(data), 0, 1)) %>%
mutate(xb = (alpha0 + a1_sim) + (alpha1 + a2_sim) * day + (alpha2 + a3_sim) * x) %>%
mutate(p = 1/(1+exp(-xb))) %>%
mutate(y = rbinom(n = nrow(data), size = 1, p = p)) %>%
dplyr::select(-a1_sim, -a2_sim, -a3_sim, -xb, -p)
summary(as.factor(data_sim$y))
160/250
# save the simulated data locally
write.table(data_sim,"Data/data_GLMMVI.txt", sep = "," ,quote = FALSE,row.names = FALSE)
data.decay = read.csv("Data/Cleaned_Data/decay2.csv")
